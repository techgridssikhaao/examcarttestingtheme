<!-- Swiper CSS -->

<!-- Swiper CSS -->
<link rel="stylesheet" href="{{ 'swiper-bundle.min.css' | asset_url }}">

<!-- Swiper JS -->
<script async src="{{ 'swiper-bundle.min.js' | asset_url }}"></script>

{% assign product_collection = section.settings.collection %}
<style>


/* Ensure all items are in a single row */
.swiper-slide {
  display: inline-block;
  width: 25%; /* Adjust this value based on the number of items you want to display in a row */
}

/* Ensure the container only takes the necessary width */
.swiper-wrapper {
  display: inline-flex;
}

/* Hide the scrollbar if you don't want it to be visible */
.swiper-container {
  overflow: hidden;
}

  
</style>

<div
  class="tt_tabsproduct_module tabs-category-slider list-module {% if section.settings.listing_rows != 1 %} multi-rows {% endif %}"
  id="product_module{{section.id}}"
  style="text-align: left;   "
>
  <div
    class="module-title"
    style="
      justify-content: space-between;
      padding-bottom: 0px;
      display: flex;
      align-items: center;
    "
  >
    {% if section.settings.heading != blank %}
      <h2 style="margin: 0px;">{{ section.settings.heading }}</h2>
      <span section-name="{{ section.settings.heading }}" onclick="collectionUrls(this)">
        <svg
          style="height: 3rem; width: 2rem;  fill: gray;     display: grid;"
          aria-hidden="true"
          focusable="false"
          data-prefix="far"
          data-icon="angle-right"
          role="img"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 320 512"
          class="svg-inline--fa fa-angle-right fa-4x"
        >
          <path  d="M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z" class=""></path>
        </svg>
      </span>
    {% endif %}
    <div class="box-tab">
      <ul class="tab-heading tabs-categorys">
        <li>
          <a data-toggle="pill" href="#tab-{{section.id}}0">
            <span>{{ section.settings.heading }}</span>
          </a>
        </li>
      </ul>
    </div>
  </div>

<div class="">
  <div class="">
    <!-- Additional required wrapper -->
    <div class="">
      {% if section.settings.listing_rows == 1 %}
        <div class="">
          {% for product in collections[product_collection].products limit: section.settings.products_tab_count %}
            {% include 'product-grid-item-list' %}
          {% endfor %}
        </div>
      {% else %}
        <div class="tab-container-{{section.id}}" id="tab-{{section.id}}0">
          {% for product in collections[product_collection].products limit: section.settings.products_tab_count %}
            <div class="">
              {% include 'product-grid-item-list' %}
            </div>
          {% endfor %}
        </div>
      {% endif %}
    </div>
    <!-- If we need pagination -->
  </div>
</div>

</div>

 <script>
	
Allows to set different parameter for different responsive breakpoints (screen sizes). Not all parameters can be changed in breakpoints, only those which do not require different layout and logic, like slidesPerView, slidesPerGroup, spaceBetween, grid.rows. Such parameters like loop and effect won't work

const swiper = new Swiper('.swiper', {
  // Default parameters
  slidesPerView: 1,
  spaceBetween: 10,
  // Responsive breakpoints
  breakpoints: {
    // when window width is >= 320px
    320: {
      slidesPerView: 2,
      spaceBetween: 20
    },
    // when window width is >= 480px
    480: {
      slidesPerView: 3,
      spaceBetween: 30
    },
    // when window width is >= 640px
    640: {
      slidesPerView: 4,
      spaceBetween: 40
    }
  }
})
</script>


<script>
   function collectionUrls(ref){
        console.log(ref);
       sectionTitle= ref.getAttribute('section-name');

     switch (sectionTitle){

        case 'all exams books':  {
            location.href='https://examcart.in/collections/all-exam-books'
             break;

         }
       case 'central exams':{
         location.href='https://examcart.in/collections/central-exams'


         break;
       }
          case 'bihar':{
         location.href='https://examcart.in/collections/bihar'
            break;
       }
          case 'haryana':{
         location.href='https://examcart.in/collections/haryana'
            break;
       }

          case 'jharkhand':{
       location.href='https://examcart.in/collections/jharkhand'
            break;
     }
          case 'chattisgarh':{
       location.href='https://examcart.in/collections/chattisgarh'
            break;
     }
          case 'uttar pradesh':{
       location.href='https://examcart.in/collections/uttar-pradesh'
            break;
     }
  case 'rajasthan':{
       location.href='https://examcart.in/collections/rajasthan'
    break;
     }

  case 'madhya pradesh':{
       location.href='https://examcart.in/collections/madhya-pradesh'
    break;
     }
          case 'delhi':{
       location.href='https://examcart.in/collections/delhi'
            break;
     }

     }
   }
</script>
<!--
  <script >



    $(document).ready(function() {
      $('a[href="#tab-{{section.id}}0"]').trigger( "click" );
        $(".tab-container-{{section.id}}").owlCarousel({
        items: {{ section.settings.no_of_products }},
        loop:  false ,
        margin:  10 ,
        nav:  false ,
        dots:  false ,
        autoplay:   false ,
        autoplayTimeout:  1000 ,
        autoplayHoverPause: true,
        autoplaySpeed:  1000 ,
        navSpeed:  1000 ,
        dotsSpeed:  1000 ,
           smartSpeed: 0,
        lazyLoad: false,
        responsive:{
        0:{
        items: 3,
        nav: false
        },
        500:{
        items: 3,
        nav: false
        },
        768:{
        items: 4
        },
        992:{
        items: 5
        },
        1200:{
        items: {{ section.settings.no_of_products }}
        },
        1600:{
        items: {{ section.settings.no_of_products }}
        }
        },
        onInitialized: function() {
        var count = $(".tab-container-{{section.id}} .owl-item.active").length;
                      if(count == 1) {
          $(".tab-container-{{section.id}} .owl-item").removeClass('first');
            $(".tab-container-{{section.id}} .owl-item.active").addClass('first');
            } else {
            $(".tab-container-{{section.id}} .owl-item").removeClass('first');
            $(".tab-container-{{section.id}} .owl-item.active:first").addClass('first');
            }
            },
            onTranslated: function() {
            var count = $(".tab-container-{{section.id}} .owl-item.active").length;
                          if(count == 1) {
              $(".tab-container-{{section.id}} .owl-item").removeClass('first');
                $(".tab-container-{{section.id}} .owl-item.active").addClass('first');
                } else {
                $(".tab-container-{{section.id}} .owl-item").removeClass('first');
                $(".tab-container-{{section.id}} .owl-item.active:first").addClass('first');
                }
                }
                });
            });



  </script>
-->
<!--
  <script>
    $(document).ready(function() {
    $('a[href="#tab-{{section.id}}0"]').trigger( "click" );
      const carousel = $(".owl-carousel-1 ").owlCarousel({
        items: {{ section.settings.no_of_products }},
        loop: true,
        margin: 10,
        nav: true,
        responsive: {
          0: { items: {{ section.settings.no_of_products }} },
          600: { items: {{ section.settings.no_of_products }} },
          1000: { items: {{ section.settings.no_of_products }} }
        }
      });

      let isDragging = false;
      let startX = 0;
      let currentTranslate = 0;
      let prevTranslate = 0;

  // const containerWidth = carousel.width();
      // console.log(carousel.width())
      // console.log(carousel.length)
      // const carouselContainer = carousel.find('.owl-stage');

      function handleDragStart(e) {
        isDragging = true;
        startX = e.clientX || e.touches[0].clientX;
        prevTranslate = currentTranslate;
        carousel.css('transition', 'none'); // Disable transitions while dragging
      }

      function handleDragMove(e) {
        if (!isDragging) return;
        const moveX = (e.clientX || e.touches[0].clientX) - startX;
         const carouselWidth = carousel.width();
        const itemsWidth = carousel.find('.owl-item').width() * carousel.find('.owl-item').length;
        const minTranslate = carouselWidth - itemsWidth;
        const maxTranslate = 0;

        currentTranslate = prevTranslate + moveX;
        currentTranslate = Math.max(Math.min(currentTranslate, maxTranslate), minTranslate);
        carousel.css('transform', `translateX(${currentTranslate}px)`);
      }

      function handleDragEnd() {
        if (isDragging) {
          isDragging = false;
          prevTranslate = currentTranslate;
          carousel.css('transition', ''); // Re-enable transitions
        }
      }

      // Touch events for mobile devices
      carousel[0].addEventListener('touchstart', handleDragStart, false);
      carousel[0].addEventListener('touchmove', handleDragMove, false);
      carousel[0].addEventListener('touchend', handleDragEnd, false);

      // Mouse events for desktops
      carousel[0].addEventListener('mousedown', handleDragStart, false);
      document.addEventListener('mousemove', handleDragMove, false);
      document.addEventListener('mouseup', handleDragEnd, false);
    });
  </script>
-->
